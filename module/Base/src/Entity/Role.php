<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2019-01-20 12:32:01.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\Role
 *
 * 角色
 *
 * @ORM\Entity(repositoryClass="RoleRepository")
 * @ORM\Table(name="`role`")
 */
class Role implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * 角色名稱
     *
     * @ORM\Column(name="`name`", type="string", length=60)
     */
    protected $name;

    /**
     * 類別
     *
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $kind;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $deep;

    /**
     * @ORM\OneToMany(targetEntity="Privilege", mappedBy="role")
     * @ORM\JoinColumn(name="id", referencedColumnName="role_id", nullable=false)
     */
    protected $privileges;

    /**
     * @ORM\OneToMany(targetEntity="RoleInherit", mappedBy="roleRelatedByRoleId")
     * @ORM\JoinColumn(name="id", referencedColumnName="role_id", nullable=false, onDelete="CASCADE")
     */
    protected $roleInheritRelatedByRoleIds;

    /**
     * @ORM\OneToMany(targetEntity="RoleInherit", mappedBy="roleRelatedByParentId")
     * @ORM\JoinColumn(name="id", referencedColumnName="parent_id", nullable=false, onDelete="CASCADE")
     */
    protected $roleInheritRelatedByParentIds;

    /**
     * @ORM\ManyToMany(targetEntity="User", mappedBy="roles")
     */
    protected $users;

    public function __construct()
    {
        $this->privileges = new ArrayCollection();
        $this->roleInheritRelatedByRoleIds = new ArrayCollection();
        $this->roleInheritRelatedByParentIds = new ArrayCollection();
        $this->users = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\Role
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of name.
     *
     * @param string $name
     * @return \Base\Entity\Role
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get the value of name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set the value of kind.
     *
     * @param string $kind
     * @return \Base\Entity\Role
     */
    public function setKind($kind)
    {
        $this->kind = $kind;

        return $this;
    }

    /**
     * Get the value of kind.
     *
     * @return string
     */
    public function getKind()
    {
        return $this->kind;
    }

    /**
     * Set the value of deep.
     *
     * @param integer $deep
     * @return \Base\Entity\Role
     */
    public function setDeep($deep)
    {
        $this->deep = $deep;

        return $this;
    }

    /**
     * Get the value of deep.
     *
     * @return integer
     */
    public function getDeep()
    {
        return $this->deep;
    }

    /**
     * Add Privilege entity to collection (one to many).
     *
     * @param \Base\Entity\Privilege $privilege
     * @return \Base\Entity\Role
     */
    public function addPrivilege(Privilege $privilege)
    {
        $this->privileges[] = $privilege;

        return $this;
    }

    /**
     * Remove Privilege entity from collection (one to many).
     *
     * @param \Base\Entity\Privilege $privilege
     * @return \Base\Entity\Role
     */
    public function removePrivilege(Privilege $privilege)
    {
        $this->privileges->removeElement($privilege);

        return $this;
    }

    /**
     * Get Privilege entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPrivileges()
    {
        return $this->privileges;
    }

    /**
     * Add RoleInherit entity related by `role_id` to collection (one to many).
     *
     * @param \Base\Entity\RoleInherit $roleInherit
     * @return \Base\Entity\Role
     */
    public function addRoleInheritRelatedByRoleId(RoleInherit $roleInherit)
    {
        $this->roleInheritRelatedByRoleIds[] = $roleInherit;

        return $this;
    }

    /**
     * Remove RoleInherit entity related by `role_id` from collection (one to many).
     *
     * @param \Base\Entity\RoleInherit $roleInherit
     * @return \Base\Entity\Role
     */
    public function removeRoleInheritRelatedByRoleId(RoleInherit $roleInherit)
    {
        $this->roleInheritRelatedByRoleIds->removeElement($roleInherit);

        return $this;
    }

    /**
     * Get RoleInherit entity related by `role_id` collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRoleInheritRelatedByRoleIds()
    {
        return $this->roleInheritRelatedByRoleIds;
    }

    /**
     * Add RoleInherit entity related by `parent_id` to collection (one to many).
     *
     * @param \Base\Entity\RoleInherit $roleInherit
     * @return \Base\Entity\Role
     */
    public function addRoleInheritRelatedByParentId(RoleInherit $roleInherit)
    {
        $this->roleInheritRelatedByParentIds[] = $roleInherit;

        return $this;
    }

    /**
     * Remove RoleInherit entity related by `parent_id` from collection (one to many).
     *
     * @param \Base\Entity\RoleInherit $roleInherit
     * @return \Base\Entity\Role
     */
    public function removeRoleInheritRelatedByParentId(RoleInherit $roleInherit)
    {
        $this->roleInheritRelatedByParentIds->removeElement($roleInherit);

        return $this;
    }

    /**
     * Get RoleInherit entity related by `parent_id` collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRoleInheritRelatedByParentIds()
    {
        return $this->roleInheritRelatedByParentIds;
    }

    /**
     * Add User entity to collection.
     *
     * @param \Base\Entity\User $user
     * @return \Base\Entity\Role
     */
    public function addUser(User $user)
    {
        $this->users[] = $user;

        return $this;
    }

    /**
     * Remove User entity from collection.
     *
     * @param \Base\Entity\User $user
     * @return \Base\Entity\Role
     */
    public function removeUser(User $user)
    {
        $this->users->removeElement($user);

        return $this;
    }

    /**
     * Get User entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUsers()
    {
        return $this->users;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'name',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'kind',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'deep',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'name', 'kind', 'deep');
        $relationFields = array();
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'name', 'kind', 'deep');
    }
}