<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2019-01-20 12:32:01.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\Resource
 *
 * 資源名稱
 *
 * @ORM\Entity(repositoryClass="ResourceRepository")
 * @ORM\Table(name="`resource`", indexes={@ORM\Index(name="fk_resource_resource1_idx", columns={"resource_id"})})
 */
class Resource implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * 顯示名稱
     *
     * @ORM\Column(name="`name`", type="string", length=45)
     */
    protected $name;

    /**
     * 資源名稱
     *
     * @ORM\Column(type="string", length=45)
     */
    protected $resource_name;

    /**
     * 是否啟用
     *
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $is_active;

    /**
     * 版本
     *
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $version;

    /**
     * 作者
     *
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $author;

    /**
     * 圖示
     *
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $icon;

    /**
     * 備註
     *
     * @ORM\Column(type="text", nullable=true)
     */
    protected $memo;

    /**
     * 建立時間
     *
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $create_time;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $resource_id;

    /**
     * @ORM\OneToMany(targetEntity="Privilege", mappedBy="resource")
     * @ORM\JoinColumn(name="id", referencedColumnName="resource_id", nullable=false)
     */
    protected $privileges;

    /**
     * @ORM\OneToMany(targetEntity="Resource", mappedBy="resource")
     * @ORM\JoinColumn(name="id", referencedColumnName="resource_id", nullable=false)
     */
    protected $resources;

    /**
     * @ORM\ManyToOne(targetEntity="Resource", inversedBy="resources")
     * @ORM\JoinColumn(name="resource_id", referencedColumnName="id")
     */
    protected $resource;

    public function __construct()
    {
        $this->privileges = new ArrayCollection();
        $this->resources = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\Resource
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of name.
     *
     * @param string $name
     * @return \Base\Entity\Resource
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get the value of name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set the value of resource_name.
     *
     * @param string $resource_name
     * @return \Base\Entity\Resource
     */
    public function setResourceName($resource_name)
    {
        $this->resource_name = $resource_name;

        return $this;
    }

    /**
     * Get the value of resource_name.
     *
     * @return string
     */
    public function getResourceName()
    {
        return $this->resource_name;
    }

    /**
     * Set the value of is_active.
     *
     * @param integer $is_active
     * @return \Base\Entity\Resource
     */
    public function setIsActive($is_active)
    {
        $this->is_active = $is_active;

        return $this;
    }

    /**
     * Get the value of is_active.
     *
     * @return integer
     */
    public function getIsActive()
    {
        return $this->is_active;
    }

    /**
     * Set the value of version.
     *
     * @param string $version
     * @return \Base\Entity\Resource
     */
    public function setVersion($version)
    {
        $this->version = $version;

        return $this;
    }

    /**
     * Get the value of version.
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Set the value of author.
     *
     * @param string $author
     * @return \Base\Entity\Resource
     */
    public function setAuthor($author)
    {
        $this->author = $author;

        return $this;
    }

    /**
     * Get the value of author.
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }

    /**
     * Set the value of icon.
     *
     * @param string $icon
     * @return \Base\Entity\Resource
     */
    public function setIcon($icon)
    {
        $this->icon = $icon;

        return $this;
    }

    /**
     * Get the value of icon.
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->icon;
    }

    /**
     * Set the value of memo.
     *
     * @param string $memo
     * @return \Base\Entity\Resource
     */
    public function setMemo($memo)
    {
        $this->memo = $memo;

        return $this;
    }

    /**
     * Get the value of memo.
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->memo;
    }

    /**
     * Set the value of create_time.
     *
     * @param \DateTime $create_time
     * @return \Base\Entity\Resource
     */
    public function setCreateTime($create_time)
    {
        $this->create_time = $create_time;

        return $this;
    }

    /**
     * Get the value of create_time.
     *
     * @return \DateTime
     */
    public function getCreateTime()
    {
        return $this->create_time;
    }

    /**
     * Set the value of resource_id.
     *
     * @param integer $resource_id
     * @return \Base\Entity\Resource
     */
    public function setResourceId($resource_id)
    {
        $this->resource_id = $resource_id;

        return $this;
    }

    /**
     * Get the value of resource_id.
     *
     * @return integer
     */
    public function getResourceId()
    {
        return $this->resource_id;
    }

    /**
     * Add Privilege entity to collection (one to many).
     *
     * @param \Base\Entity\Privilege $privilege
     * @return \Base\Entity\Resource
     */
    public function addPrivilege(Privilege $privilege)
    {
        $this->privileges[] = $privilege;

        return $this;
    }

    /**
     * Remove Privilege entity from collection (one to many).
     *
     * @param \Base\Entity\Privilege $privilege
     * @return \Base\Entity\Resource
     */
    public function removePrivilege(Privilege $privilege)
    {
        $this->privileges->removeElement($privilege);

        return $this;
    }

    /**
     * Get Privilege entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPrivileges()
    {
        return $this->privileges;
    }

    /**
     * Add Resource entity to collection (one to many).
     *
     * @param \Base\Entity\Resource $resource
     * @return \Base\Entity\Resource
     */
    public function addResource(Resource $resource)
    {
        $this->resources[] = $resource;

        return $this;
    }

    /**
     * Remove Resource entity from collection (one to many).
     *
     * @param \Base\Entity\Resource $resource
     * @return \Base\Entity\Resource
     */
    public function removeResource(Resource $resource)
    {
        $this->resources->removeElement($resource);

        return $this;
    }

    /**
     * Get Resource entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getResources()
    {
        return $this->resources;
    }

    /**
     * Set Resource entity (many to one).
     *
     * @param \Base\Entity\Resource $resource
     * @return \Base\Entity\Resource
     */
    public function setResource(Resource $resource = null)
    {
        $this->resource = $resource;

        return $this;
    }

    /**
     * Get Resource entity (many to one).
     *
     * @return \Base\Entity\Resource
     */
    public function getResource()
    {
        return $this->resource;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'name',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'resource_name',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'is_active',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'version',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'author',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'icon',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'memo',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'create_time',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'resource_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'name', 'resource_name', 'is_active', 'version', 'author', 'icon', 'memo', 'create_time', 'resource_id');
        $relationFields = array('resource');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'name', 'resource_name', 'is_active', 'version', 'author', 'icon', 'memo', 'create_time', 'resource_id');
    }
}