<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2019-01-20 12:32:01.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\SemesterClass
 *
 * 班級
 *
 * @ORM\Entity(repositoryClass="SemesterClassRepository")
 * @ORM\Table(name="semester_class", indexes={@ORM\Index(name="fk_school_class_semester1_idx", columns={"semester_id"})})
 */
class SemesterClass implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * 年級
     *
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $grade;

    /**
     * 班名
     *
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $class_name;

    /**
     * 班序
     *
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $class_no;

    /**
     * @ORM\Column(type="integer")
     */
    protected $semester_id;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $tutor;

    /**
     * @ORM\OneToMany(targetEntity="SemesterStudent", mappedBy="semesterClass")
     * @ORM\JoinColumn(name="id", referencedColumnName="semester_class_id", nullable=false)
     */
    protected $semesterStudents;

    /**
     * @ORM\OneToMany(targetEntity="TeacherCourse", mappedBy="semesterClass")
     * @ORM\JoinColumn(name="id", referencedColumnName="semester_class_id", nullable=false)
     */
    protected $teacherCourses;

    /**
     * @ORM\ManyToOne(targetEntity="Semester", inversedBy="semesterClasses")
     * @ORM\JoinColumn(name="semester_id", referencedColumnName="id", nullable=false)
     */
    protected $semester;

    /**
     * @ORM\ManyToMany(targetEntity="Teacher", inversedBy="semesterClasses")
     * @ORM\JoinTable(name="semester_class_has_teacher",
     *     joinColumns={@ORM\JoinColumn(name="semester_class_id", referencedColumnName="id", nullable=false)},
     *     inverseJoinColumns={@ORM\JoinColumn(name="teacher_id", referencedColumnName="id", nullable=false)}
     * )
     */
    protected $teachers;

    public function __construct()
    {
        $this->semesterStudents = new ArrayCollection();
        $this->teacherCourses = new ArrayCollection();
        $this->teachers = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\SemesterClass
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of grade.
     *
     * @param integer $grade
     * @return \Base\Entity\SemesterClass
     */
    public function setGrade($grade)
    {
        $this->grade = $grade;

        return $this;
    }

    /**
     * Get the value of grade.
     *
     * @return integer
     */
    public function getGrade()
    {
        return $this->grade;
    }

    /**
     * Set the value of class_name.
     *
     * @param string $class_name
     * @return \Base\Entity\SemesterClass
     */
    public function setClassName($class_name)
    {
        $this->class_name = $class_name;

        return $this;
    }

    /**
     * Get the value of class_name.
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->class_name;
    }

    /**
     * Set the value of class_no.
     *
     * @param integer $class_no
     * @return \Base\Entity\SemesterClass
     */
    public function setClassNo($class_no)
    {
        $this->class_no = $class_no;

        return $this;
    }

    /**
     * Get the value of class_no.
     *
     * @return integer
     */
    public function getClassNo()
    {
        return $this->class_no;
    }

    /**
     * Set the value of semester_id.
     *
     * @param integer $semester_id
     * @return \Base\Entity\SemesterClass
     */
    public function setSemesterId($semester_id)
    {
        $this->semester_id = $semester_id;

        return $this;
    }

    /**
     * Get the value of semester_id.
     *
     * @return integer
     */
    public function getSemesterId()
    {
        return $this->semester_id;
    }

    /**
     * Set the value of tutor.
     *
     * @param string $tutor
     * @return \Base\Entity\SemesterClass
     */
    public function setTutor($tutor)
    {
        $this->tutor = $tutor;

        return $this;
    }

    /**
     * Get the value of tutor.
     *
     * @return string
     */
    public function getTutor()
    {
        return $this->tutor;
    }

    /**
     * Add SemesterStudent entity to collection (one to many).
     *
     * @param \Base\Entity\SemesterStudent $semesterStudent
     * @return \Base\Entity\SemesterClass
     */
    public function addSemesterStudent(SemesterStudent $semesterStudent)
    {
        $this->semesterStudents[] = $semesterStudent;

        return $this;
    }

    /**
     * Remove SemesterStudent entity from collection (one to many).
     *
     * @param \Base\Entity\SemesterStudent $semesterStudent
     * @return \Base\Entity\SemesterClass
     */
    public function removeSemesterStudent(SemesterStudent $semesterStudent)
    {
        $this->semesterStudents->removeElement($semesterStudent);

        return $this;
    }

    /**
     * Get SemesterStudent entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSemesterStudents()
    {
        return $this->semesterStudents;
    }

    /**
     * Add TeacherCourse entity to collection (one to many).
     *
     * @param \Base\Entity\TeacherCourse $teacherCourse
     * @return \Base\Entity\SemesterClass
     */
    public function addTeacherCourse(TeacherCourse $teacherCourse)
    {
        $this->teacherCourses[] = $teacherCourse;

        return $this;
    }

    /**
     * Remove TeacherCourse entity from collection (one to many).
     *
     * @param \Base\Entity\TeacherCourse $teacherCourse
     * @return \Base\Entity\SemesterClass
     */
    public function removeTeacherCourse(TeacherCourse $teacherCourse)
    {
        $this->teacherCourses->removeElement($teacherCourse);

        return $this;
    }

    /**
     * Get TeacherCourse entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTeacherCourses()
    {
        return $this->teacherCourses;
    }

    /**
     * Set Semester entity (many to one).
     *
     * @param \Base\Entity\Semester $semester
     * @return \Base\Entity\SemesterClass
     */
    public function setSemester(Semester $semester = null)
    {
        $this->semester = $semester;

        return $this;
    }

    /**
     * Get Semester entity (many to one).
     *
     * @return \Base\Entity\Semester
     */
    public function getSemester()
    {
        return $this->semester;
    }

    /**
     * Add Teacher entity to collection.
     *
     * @param \Base\Entity\Teacher $teacher
     * @return \Base\Entity\SemesterClass
     */
    public function addTeacher(Teacher $teacher)
    {
        $teacher->addSemesterClass($this);
        $this->teachers[] = $teacher;

        return $this;
    }

    /**
     * Remove Teacher entity from collection.
     *
     * @param \Base\Entity\Teacher $teacher
     * @return \Base\Entity\SemesterClass
     */
    public function removeTeacher(Teacher $teacher)
    {
        $teacher->removeSemesterClass($this);
        $this->teachers->removeElement($teacher);

        return $this;
    }

    /**
     * Get Teacher entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTeachers()
    {
        return $this->teachers;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'grade',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'class_name',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'class_no',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'semester_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'tutor',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'grade', 'class_name', 'class_no', 'semester_id', 'tutor');
        $relationFields = array('semester');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'grade', 'class_name', 'class_no', 'semester_id', 'tutor');
    }
}