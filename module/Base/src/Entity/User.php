<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2018-11-27 13:44:15.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\User
 *
 * @ORM\Entity(repositoryClass="UserRepository")
 * @ORM\Table(name="`user`")
 */
class User implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="string", length=100)
     */
    protected $username;

    /**
     * @ORM\Column(name="`level`", type="integer", nullable=true)
     */
    protected $level;

    /**
     * @ORM\Column(name="`name`", type="string", length=50)
     */
    protected $name;

    /**
     * @ORM\Column(type="string", length=50, nullable=true)
     */
    protected $job_title;

    /**
     * @ORM\Column(name="`password`", type="string", length=128, nullable=true)
     */
    protected $password;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $mr_unit_id;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $email;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $phone;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $mobile;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $display_name;

    /**
     * @ORM\Column(name="`role`", type="string", length=45, nullable=true)
     */
    protected $role;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $phone_ext;

    /**
     * @ORM\Column(type="integer", nullable=true)
     */
    protected $is_active;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $mail_verify;

    /**
     * @ORM\OneToMany(targetEntity="Menu", mappedBy="user")
     * @ORM\JoinColumn(name="username", referencedColumnName="user_username", nullable=false)
     */
    protected $menus;

    /**
     * @ORM\OneToMany(targetEntity="Note", mappedBy="user")
     * @ORM\JoinColumn(name="username", referencedColumnName="user_username", nullable=false)
     */
    protected $notes;

    /**
     * @ORM\OneToMany(targetEntity="Page", mappedBy="user")
     * @ORM\JoinColumn(name="username", referencedColumnName="user_username", nullable=false)
     */
    protected $pages;

    /**
     * @ORM\ManyToMany(targetEntity="Role", inversedBy="users")
     * @ORM\JoinTable(name="user_has_role",
     *     joinColumns={@ORM\JoinColumn(name="user_username", referencedColumnName="username", nullable=false)},
     *     inverseJoinColumns={@ORM\JoinColumn(name="role_id", referencedColumnName="id", nullable=false)}
     * )
     */
    protected $roles;

    public function __construct()
    {
        $this->menus = new ArrayCollection();
        $this->notes = new ArrayCollection();
        $this->pages = new ArrayCollection();
        $this->roles = new ArrayCollection();
    }

    /**
     * Set the value of username.
     *
     * @param string $username
     * @return \Base\Entity\User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Get the value of username.
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set the value of level.
     *
     * @param integer $level
     * @return \Base\Entity\User
     */
    public function setLevel($level)
    {
        $this->level = $level;

        return $this;
    }

    /**
     * Get the value of level.
     *
     * @return integer
     */
    public function getLevel()
    {
        return $this->level;
    }

    /**
     * Set the value of name.
     *
     * @param string $name
     * @return \Base\Entity\User
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get the value of name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set the value of job_title.
     *
     * @param string $job_title
     * @return \Base\Entity\User
     */
    public function setJobTitle($job_title)
    {
        $this->job_title = $job_title;

        return $this;
    }

    /**
     * Get the value of job_title.
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->job_title;
    }

    /**
     * Set the value of password.
     *
     * @param string $password
     * @return \Base\Entity\User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get the value of password.
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set the value of mr_unit_id.
     *
     * @param integer $mr_unit_id
     * @return \Base\Entity\User
     */
    public function setMrUnitId($mr_unit_id)
    {
        $this->mr_unit_id = $mr_unit_id;

        return $this;
    }

    /**
     * Get the value of mr_unit_id.
     *
     * @return integer
     */
    public function getMrUnitId()
    {
        return $this->mr_unit_id;
    }

    /**
     * Set the value of email.
     *
     * @param string $email
     * @return \Base\Entity\User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get the value of email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the value of phone.
     *
     * @param string $phone
     * @return \Base\Entity\User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get the value of phone.
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set the value of mobile.
     *
     * @param string $mobile
     * @return \Base\Entity\User
     */
    public function setMobile($mobile)
    {
        $this->mobile = $mobile;

        return $this;
    }

    /**
     * Get the value of mobile.
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->mobile;
    }

    /**
     * Set the value of display_name.
     *
     * @param string $display_name
     * @return \Base\Entity\User
     */
    public function setDisplayName($display_name)
    {
        $this->display_name = $display_name;

        return $this;
    }

    /**
     * Get the value of display_name.
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * Set the value of role.
     *
     * @param string $role
     * @return \Base\Entity\User
     */
    public function setRole($role)
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Get the value of role.
     *
     * @return string
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * Set the value of phone_ext.
     *
     * @param string $phone_ext
     * @return \Base\Entity\User
     */
    public function setPhoneExt($phone_ext)
    {
        $this->phone_ext = $phone_ext;

        return $this;
    }

    /**
     * Get the value of phone_ext.
     *
     * @return string
     */
    public function getPhoneExt()
    {
        return $this->phone_ext;
    }

    /**
     * Set the value of is_active.
     *
     * @param integer $is_active
     * @return \Base\Entity\User
     */
    public function setIsActive($is_active)
    {
        $this->is_active = $is_active;

        return $this;
    }

    /**
     * Get the value of is_active.
     *
     * @return integer
     */
    public function getIsActive()
    {
        return $this->is_active;
    }

    /**
     * Set the value of mail_verify.
     *
     * @param string $mail_verify
     * @return \Base\Entity\User
     */
    public function setMailVerify($mail_verify)
    {
        $this->mail_verify = $mail_verify;

        return $this;
    }

    /**
     * Get the value of mail_verify.
     *
     * @return string
     */
    public function getMailVerify()
    {
        return $this->mail_verify;
    }

    /**
     * Add Menu entity to collection (one to many).
     *
     * @param \Base\Entity\Menu $menu
     * @return \Base\Entity\User
     */
    public function addMenu(Menu $menu)
    {
        $this->menus[] = $menu;

        return $this;
    }

    /**
     * Remove Menu entity from collection (one to many).
     *
     * @param \Base\Entity\Menu $menu
     * @return \Base\Entity\User
     */
    public function removeMenu(Menu $menu)
    {
        $this->menus->removeElement($menu);

        return $this;
    }

    /**
     * Get Menu entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getMenus()
    {
        return $this->menus;
    }

    /**
     * Add Note entity to collection (one to many).
     *
     * @param \Base\Entity\Note $note
     * @return \Base\Entity\User
     */
    public function addNote(Note $note)
    {
        $this->notes[] = $note;

        return $this;
    }

    /**
     * Remove Note entity from collection (one to many).
     *
     * @param \Base\Entity\Note $note
     * @return \Base\Entity\User
     */
    public function removeNote(Note $note)
    {
        $this->notes->removeElement($note);

        return $this;
    }

    /**
     * Get Note entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNotes()
    {
        return $this->notes;
    }

    /**
     * Add Page entity to collection (one to many).
     *
     * @param \Base\Entity\Page $page
     * @return \Base\Entity\User
     */
    public function addPage(Page $page)
    {
        $this->pages[] = $page;

        return $this;
    }

    /**
     * Remove Page entity from collection (one to many).
     *
     * @param \Base\Entity\Page $page
     * @return \Base\Entity\User
     */
    public function removePage(Page $page)
    {
        $this->pages->removeElement($page);

        return $this;
    }

    /**
     * Get Page entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPages()
    {
        return $this->pages;
    }

    /**
     * Add Role entity to collection.
     *
     * @param \Base\Entity\Role $role
     * @return \Base\Entity\User
     */
    public function addRole(Role $role)
    {
        $role->addUser($this);
        $this->roles[] = $role;

        return $this;
    }

    /**
     * Remove Role entity from collection.
     *
     * @param \Base\Entity\Role $role
     * @return \Base\Entity\User
     */
    public function removeRole(Role $role)
    {
        $role->removeUser($this);
        $this->roles->removeElement($role);

        return $this;
    }

    /**
     * Get Role entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRoles()
    {
        return $this->roles;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'username',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'level',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'name',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'job_title',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'password',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'mr_unit_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'email',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'phone',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'mobile',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'display_name',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'role',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'phone_ext',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'is_active',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'mail_verify',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('username', 'level', 'name', 'job_title', 'password', 'mr_unit_id', 'email', 'phone', 'mobile', 'display_name', 'role', 'phone_ext', 'is_active', 'mail_verify');
        $relationFields = array();
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('username', 'level', 'name', 'job_title', 'password', 'mr_unit_id', 'email', 'phone', 'mobile', 'display_name', 'role', 'phone_ext', 'is_active', 'mail_verify');
    }

    public static function hashPassword($player, $password)
    {
        return ($player->getPassword() === md5($password));
    }

}