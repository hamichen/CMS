<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-zf2inputfilterannotation) on 2019-01-23 03:52:03.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Base\Entity;

use Doctrine\ORM\Mapping as ORM;
use Zend\InputFilter\InputFilter;
use Zend\InputFilter\Factory as InputFactory;
use Zend\InputFilter\InputFilterAwareInterface;
use Zend\InputFilter\InputFilterInterface;

/**
 * Base\Entity\ExamDatum
 *
 * @ORM\Entity()
 * @ORM\Table(name="exam_data", indexes={@ORM\Index(name="fk_exam_data_student1_idx", columns={"student_id"}), @ORM\Index(name="fk_exam_data_exam1_idx", columns={"exam_id"})})
 */
class ExamDatum implements InputFilterAwareInterface
{
    /**
     * Instance of InputFilterInterface.
     *
     * @var InputFilter
     */
    private $inputFilter;

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $student_id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $exam_id;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $upload_time;

    /**
     * @ORM\Column(type="string", length=200, nullable=true)
     */
    protected $mongo_id;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $exam_datacol;

    /**
     * @ORM\Column(type="float", nullable=true)
     */
    protected $score;

    /**
     * @ORM\ManyToOne(targetEntity="Student", inversedBy="examData")
     * @ORM\JoinColumn(name="student_id", referencedColumnName="id", nullable=false)
     */
    protected $student;

    /**
     * @ORM\ManyToOne(targetEntity="Exam", inversedBy="examData")
     * @ORM\JoinColumn(name="exam_id", referencedColumnName="id", nullable=false)
     */
    protected $exam;

    public function __construct()
    {
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Base\Entity\ExamDatum
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of student_id.
     *
     * @param integer $student_id
     * @return \Base\Entity\ExamDatum
     */
    public function setStudentId($student_id)
    {
        $this->student_id = $student_id;

        return $this;
    }

    /**
     * Get the value of student_id.
     *
     * @return integer
     */
    public function getStudentId()
    {
        return $this->student_id;
    }

    /**
     * Set the value of exam_id.
     *
     * @param integer $exam_id
     * @return \Base\Entity\ExamDatum
     */
    public function setExamId($exam_id)
    {
        $this->exam_id = $exam_id;

        return $this;
    }

    /**
     * Get the value of exam_id.
     *
     * @return integer
     */
    public function getExamId()
    {
        return $this->exam_id;
    }

    /**
     * Set the value of upload_time.
     *
     * @param \DateTime $upload_time
     * @return \Base\Entity\ExamDatum
     */
    public function setUploadTime($upload_time)
    {
        $this->upload_time = $upload_time;

        return $this;
    }

    /**
     * Get the value of upload_time.
     *
     * @return \DateTime
     */
    public function getUploadTime()
    {
        return $this->upload_time;
    }

    /**
     * Set the value of mongo_id.
     *
     * @param string $mongo_id
     * @return \Base\Entity\ExamDatum
     */
    public function setMongoId($mongo_id)
    {
        $this->mongo_id = $mongo_id;

        return $this;
    }

    /**
     * Get the value of mongo_id.
     *
     * @return string
     */
    public function getMongoId()
    {
        return $this->mongo_id;
    }

    /**
     * Set the value of exam_datacol.
     *
     * @param string $exam_datacol
     * @return \Base\Entity\ExamDatum
     */
    public function setExamDatacol($exam_datacol)
    {
        $this->exam_datacol = $exam_datacol;

        return $this;
    }

    /**
     * Get the value of exam_datacol.
     *
     * @return string
     */
    public function getExamDatacol()
    {
        return $this->exam_datacol;
    }

    /**
     * Set the value of score.
     *
     * @param float $score
     * @return \Base\Entity\ExamDatum
     */
    public function setScore($score)
    {
        $this->score = $score;

        return $this;
    }

    /**
     * Get the value of score.
     *
     * @return float
     */
    public function getScore()
    {
        return $this->score;
    }

    /**
     * Set Student entity (many to one).
     *
     * @param \Base\Entity\Student $student
     * @return \Base\Entity\ExamDatum
     */
    public function setStudent(Student $student = null)
    {
        $this->student = $student;

        return $this;
    }

    /**
     * Get Student entity (many to one).
     *
     * @return \Base\Entity\Student
     */
    public function getStudent()
    {
        return $this->student;
    }

    /**
     * Set Exam entity (many to one).
     *
     * @param \Base\Entity\Exam $exam
     * @return \Base\Entity\ExamDatum
     */
    public function setExam(Exam $exam = null)
    {
        $this->exam = $exam;

        return $this;
    }

    /**
     * Get Exam entity (many to one).
     *
     * @return \Base\Entity\Exam
     */
    public function getExam()
    {
        return $this->exam;
    }

    /**
     * Not used, Only defined to be compatible with InputFilterAwareInterface.
     * 
     * @param \Zend\InputFilter\InputFilterInterface $inputFilter
     * @throws \Exception
     */
    public function setInputFilter(InputFilterInterface $inputFilter)
    {
        throw new \Exception("Not used.");
    }

    /**
     * Return a for this entity configured input filter instance.
     *
     * @return InputFilterInterface
     */
    public function getInputFilter()
    {
        if ($this->inputFilter instanceof InputFilterInterface) {
            return $this->inputFilter;
        }
        $factory = new InputFactory();
        $filters = array(
            array(
                'name' => 'id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'student_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'exam_id',
                'required' => true,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'upload_time',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'mongo_id',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'exam_datacol',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
            array(
                'name' => 'score',
                'required' => false,
                'filters' => array(),
                'validators' => array(),
            ),
        );
        $this->inputFilter = $factory->createInputFilter($filters);

        return $this->inputFilter;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'student_id', 'exam_id', 'upload_time', 'mongo_id', 'exam_datacol', 'score');
        $relationFields = array('student', 'exam');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'student_id', 'exam_id', 'upload_time', 'mongo_id', 'exam_datacol', 'score');
    }
}